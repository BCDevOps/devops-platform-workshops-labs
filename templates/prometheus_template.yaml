kind: Template
apiVersion: v1
labels:
  template: prometheus-template
objects:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
    metadata:
      labels:
        component: ${PROMETHEUS_SERVICE_NAME}
        app: prometheus
        release: ${PROMETHEUS_SERVICE_NAME}
        chart: prometheus-9.1.2
        heritage: Tiller
      name: ${PROMETHEUS_SERVICE_NAME}
  - apiVersion: v1
    kind: Service
    spec:
      ports:
        - name: http
          port: 80
          protocol: TCP
          targetPort: 9090
      selector:
        component: ${PROMETHEUS_SERVICE_NAME}
        app: prometheus
        release: ${PROMETHEUS_SERVICE_NAME}
      type: ClusterIP
    metadata:
      labels:
        component: ${PROMETHEUS_SERVICE_NAME}
        app: prometheus
        release: ${PROMETHEUS_SERVICE_NAME}
        chart: prometheus-9.1.2
        heritage: Tiller
      name: ${PROMETHEUS_SERVICE_NAME}
  - apiVersion: extensions/v1beta1
    kind: Deployment
    spec:
      selector:
        matchLabels:
          component: ${PROMETHEUS_SERVICE_NAME}
          app: prometheus
          release: ${PROMETHEUS_SERVICE_NAME}
      replicas: 1
      template:
        metadata:
          labels:
            component: ${PROMETHEUS_SERVICE_NAME}
            app: prometheus
            release: ${PROMETHEUS_SERVICE_NAME}
            chart: prometheus-9.1.2
            heritage: Tiller
        spec:
          serviceAccountName: default
          containers:
            - name: ${PROMETHEUS_SERVICE_NAME}-prometheus-configmap-reload
              image: 'jimmidyson/configmap-reload:v0.2.2'
              imagePullPolicy: IfNotPresent
              args:
                - '--volume-dir=/etc/config'
                - '--webhook-url=http://127.0.0.1:9090/-/reload'
              resources: {}
              volumeMounts:
                - name: config-volume
                  mountPath: /etc/config
                  readOnly: true
            - name: ${PROMETHEUS_SERVICE_NAME}-prometheus
              image: 'prom/prometheus:v2.11.1'
              imagePullPolicy: IfNotPresent
              args:
                - '--storage.tsdb.retention.time=15d'
                - '--config.file=/etc/config/prometheus.yml'
                - '--storage.tsdb.path=/data'
                - '--web.console.libraries=/etc/prometheus/console_libraries'
                - '--web.console.templates=/etc/prometheus/consoles'
                - '--web.enable-lifecycle'
              ports:
                - containerPort: 9090
              readinessProbe:
                httpGet:
                  path: /-/ready
                  port: 9090
                initialDelaySeconds: 30
                timeoutSeconds: 30
              livenessProbe:
                httpGet:
                  path: /-/healthy
                  port: 9090
                initialDelaySeconds: 30
                timeoutSeconds: 30
              resources: {}
              volumeMounts:
                - name: config-volume
                  mountPath: /etc/config
                - name: storage-volume
                  mountPath: /data
                  subPath: ''
          terminationGracePeriodSeconds: 300
          volumes:
            - name: config-volume
              configMap:
                name: ${PROMETHEUS_SERVICE_NAME}
            - name: storage-volume
              persistentVolumeClaim:
                claimName: ${PROMETHEUS_SERVICE_NAME}
    metadata:
      labels:
        component: ${PROMETHEUS_SERVICE_NAME}
        app: prometheus
        release: ${PROMETHEUS_SERVICE_NAME}
        chart: prometheus-9.1.2
        heritage: Tiller
      name: ${PROMETHEUS_SERVICE_NAME}
parameters:
- description: The name of the OpenShift Service exposed for the database.
  displayName: Priometheus Service Name
  name: PROMETHEUS_SERVICE_NAME
  required: true
  value: prometheus